{"version":3,"sources":["App.js","index.js"],"names":["initialCards","name","level","type","base","enhancement","keen","phys","ele","filteredCards","initialQuery","text","App","useState","query","setQuery","filter","card","toLowerCase","indexOf","id","value","onChange","event","target","placeholder","spellCheck","autoComplete","map","className","ReactDOM","render","document","getElementById"],"mappings":"gNAGMA,EAAe,CACnB,CAEEC,KAAM,UACNC,MAAO,KACPC,KAAM,SAGNC,KAAM,eACNC,YAAa,EACbC,MAAM,EACNC,KAAM,aACNC,IAAK,YAEP,CACEP,KAAM,iBACNC,MAAO,KACPC,KAAM,SAENC,KAAM,aACNC,YAAa,EACbC,MAAM,EACNC,KAAM,cACNC,IAAK,uBAILC,EAAgB,GAEdC,EAAe,CACnBC,KAAM,IAGO,SAASC,IAAO,IAAD,EACFC,mBAASH,GADP,mBACrBI,EADqB,KACdC,EADc,KAY5B,OAFAN,EAAgBT,EAAagB,QAAO,SAAAC,GAAI,OAAIA,EAAKhB,KAAKiB,cAAcC,QAAQL,EAAMH,KAAKO,kBAGrF,sBAAKE,GAAG,MAAR,UAEE,qBAAKA,GAAG,QAAR,SACE,uBACEnB,KAAK,OACLoB,MAAOP,EAAMH,KACbW,SAdc,SAAAC,GACpBR,EAAS,2BAAKD,GAAN,kBAAcS,EAAMC,OAAOvB,KAAOsB,EAAMC,OAAOH,UAcjDI,YAAY,SACZC,WAAW,QACXC,aAAa,UAIjB,qBAAKP,GAAG,YACR,qBAAKA,GAAG,QAAR,SAEIX,EAAcmB,KAAI,SAAAX,GAAI,OACpB,sBAAKY,UAAU,OAAf,UACE,wCAAWZ,EAAKhB,QAChB,yCAAYgB,EAAKf,SACjB,wCAAWe,EAAKb,QAChB,+CAAkBa,EAAKZ,eACvB,wCAAWY,EAAKX,KAAO,OAAS,WAChC,yCACA,mCAAMW,EAAKV,QACX,mCAAMU,EAAKT,SARcS,EAAKhB,c,MCvD5C6B,IAASC,OAAO,cAAC,IAAD,UAAe,cAACnB,EAAD,MAAyBoB,SAASC,eAAe,W","file":"static/js/main.088975a8.chunk.js","sourcesContent":["// dependencies\nimport { useState } from 'react';\n\nconst initialCards = [\n  {\n    // required\n    name: 'Justice',\n    level: '20',\n    type: 'Weapon',\n\n    // optional,\n    base: 'Light Hammer',\n    enhancement: 4,\n    keen: true,\n    phys: '2d8 Bludge',\n    ele: '1d8 Posi'\n  },\n  {\n    name: 'Voidmind Blade',\n    level: '35',\n    type: 'Weapon',\n\n    base: 'Shortsword',\n    enhancement: 7,\n    keen: true,\n    phys: '2d12 Pierce',\n    ele: '1d8 Acid, 1d4 Nega'\n  }\n]\n\nlet filteredCards = [];\n\nconst initialQuery = {\n  text: ''\n}\n\nexport default function App() {\n  const [query, setQuery] = useState(initialQuery);\n  // const [displayCards] = useState(initialCards);\n  // const [savedCards, setSavedCards] = useState([]);\n\n  const onQueryChange = event => {\n    setQuery({ ...query, [event.target.name]: event.target.value });\n  }\n\n  // current bug, search bar swaps results? but swapping .indexOf queries doesn't update state at all\n  filteredCards = initialCards.filter(card => card.name.toLowerCase().indexOf(query.text.toLowerCase()));\n\n  return (\n    <div id=\"app\">\n      {/* ========================= */}\n      <div id=\"query\">\n        <input\n          name='text'\n          value={query.text}\n          onChange={onQueryChange}\n          placeholder='search'\n          spellCheck='false'\n          autoComplete='off'\n        />\n      </div>\n      {/* ========================= */}\n      <div id=\"padding\" />\n      <div id=\"cards\">\n        {\n          filteredCards.map(card => (\n            <div className='card' key={card.name}>\n              <h3>Item: {card.name}</h3>\n              <h4>Level: {card.level}</h4>\n              <h4>Base: {card.base}</h4>\n              <h4>Enhancement: {card.enhancement}</h4>\n              <h4>Keen: {card.keen ? 'True' : 'False'}</h4>\n              <h4>Damage:</h4>\n              <h4>~{card.phys}</h4>\n              <h4>~{card.ele}</h4>\n            </div>\n          ))\n        }\n      </div>\n      {/* ========================= */} \n    </div> \n  )\n}","// dependencies\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\n// components\nimport App from './App';\n\n// styles\nimport './App.css';\n\n// attach app to dom\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}
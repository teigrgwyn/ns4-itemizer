{"version":3,"sources":["components/Search.js","components/Cards.js","App.js","index.js"],"names":["Search","props","query","onQueryChange","TopDiv","id","StyledInput","name","value","text","onChange","placeholder","spellCheck","autoComplete","styled","div","input","Items","cardCount","filteredItems","items","filter","card","toLowerCase","includes","map","index","CardDiv","CardNameContainer","CardName","CardBaseContainer","CardBase","base","CardLevel","level","enhancement","keen","onHit","CardInfo","phys","ele","h1","h2","h3","CardEnhancement","CardKeen","CardOnHit","effect","chance","dc","duration","damage","physical","positive","App","useState","setQuery","event","target","hasOwnProperty","Object","defineProperty","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39d29f0a.chunk.js","sourcesContent":["// dependencies\r\nimport styled from 'styled-components';\r\n\r\nexport default function Search(props) {\r\n  const { query, onQueryChange } = props;\r\n\r\n  return (\r\n    <TopDiv id=\"query\">\r\n      <StyledInput\r\n        name='text'\r\n        value={query.text}\r\n        onChange={onQueryChange}\r\n        placeholder='search'\r\n        spellCheck='false'\r\n        autoComplete='off'\r\n      />\r\n    </TopDiv>\r\n  )\r\n}\r\n\r\nconst TopDiv = styled.div `\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  padding-top: 3vh;\r\n  padding-bottom: 3vh;\r\n  border-bottom: 2px solid #20232A;\r\n\r\n  // allows search menu to be sticky\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1;\r\n  background-color: #0D1117;\r\n`\r\n\r\nconst StyledInput = styled.input `\r\n  padding: 5px;\r\n\tbackground-color: #20232A;\r\n\r\n\twidth: 273px;\r\n\theight: 30px;\r\n\r\n\tbox-shadow: 0 0 3px #20232A, 0 0 10px black inset;\r\n\tborder-radius: 10px;\r\n\tborder: 2px solid #20232A;\r\n\r\n  font-size: 0.9rem;\r\n\ttext-align: center;\r\n\r\n  color: darkgray;\r\n\r\n  ::placeholder {\r\n    color: #0D0D0D;\r\n  }\r\n\r\n  ::selection {\r\n    background-color: darkgray;\r\n    color: #0D0D0D;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    box-shadow: 0 0 3px #20232A, 0 0 7px black inset;\r\n  }\r\n\r\n  /* :focus::placeholder {\r\n\t  color: #20232A;\r\n  } */\r\n`","// dependencies\r\nimport styled from 'styled-components';\r\n\r\nconst CARDS_MAX = 50;\r\n\r\nexport default function Items(props) {\r\n  const { query } = props;\r\n\r\n  //let filteredItems = items;\r\n  // logic for displaying card limit up to 'CARDS_MAX'\r\n  let cardCount = 0;\r\n  const filteredItems = items.filter(card => {\r\n    if (cardCount < CARDS_MAX && card.name.toLowerCase().includes(query.text.toLowerCase())) {\r\n      cardCount++;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  })\r\n\r\n  return (\r\n    <TopDiv id=\"cards\">\r\n      {\r\n        filteredItems.map((card, index) => (\r\n          <CardDiv key={index}>\r\n            <CardNameContainer>\r\n              <CardName>{card.name}</CardName>\r\n              <CardBaseContainer>\r\n                <CardBase>{card.base}</CardBase>\r\n              </CardBaseContainer>\r\n              <CardLevel>{card.level}</CardLevel>\r\n              {/* dynamic render logic */}\r\n              {card.enhancement}\r\n              {card.keen}\r\n              {card.onHit}\r\n            </CardNameContainer>\r\n            {/* 'if (key in card)' will return true if a key exists for that object - can use to determine how to label data for display during render (weapons vs armor vs shields etc) */}\r\n            <CardInfo>\r\n              <h3>Damage:</h3>\r\n              <h3>~{card.phys}</h3>\r\n              <h3>~{card.ele}</h3>\r\n            </CardInfo>\r\n          </CardDiv>\r\n        ))\r\n      }\r\n    </TopDiv>\r\n  )\r\n}\r\n\r\nconst TopDiv = styled.div `\r\n  padding: 2vh;\r\n\r\n  // have cards display uniformly & neatly\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n\r\n  scrollbar-color: black;\r\n`\r\n\r\nconst CardDiv = styled.div `\r\n  margin: 1.5vh;\r\n\t\r\n  // size of each card\r\n\twidth: 185px;\r\n\theight: 273px;\r\n\r\n\tcolor: darkgray; // placeholder\r\n`\r\n\r\nconst CardNameContainer = styled.div `\r\n\tmargin: 2%;\r\n  \r\n  // allow all card properties to be displayed over the card name\r\n  overflow: inset hidden;\r\n  \r\n  // required for card name to display properly due to text transforms\r\n  position: relative;\r\n\r\n  // force all card names to consume 2 lines of text\r\n\theight: 48px;\r\n\r\n  // general styling\r\n  background-color: #20232A;\r\n  box-shadow: 0 0 3px #20232A, 0 0 10px black inset;\r\n\tborder-radius: 10px;\r\n\tborder: 2px solid #20232A;\r\n`\r\n\r\nconst CardName = styled.h1 `\r\n\t// allows single-line titles to be properly vertically-spaced\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\r\n\t// centers title to middle of line\r\n  min-width: 85%;\r\n\ttext-align: center;\r\n`\r\n\r\nconst CardBaseContainer = styled.div `\r\n  // move base to bottom of title space\r\n  position: absolute;\r\n  left: 50%;\r\n  // will change depending on base font size\r\n  transform: translate(-50%, 350%);\r\n\r\n  // centers base to middle of line\r\n  min-width: 100%;\r\n  text-align: center;\r\n`\r\n\r\nconst CardBase = styled.h2 `\r\n  // force text area to have it's own dynamic area\r\n  display: inline;\r\n  padding: 2% 5%;\r\n\r\n  background-color: #20232A;\r\n\r\n  font-size: 0.66rem;\r\n\r\n  // general styling\r\n  background-color: #20232A;\r\n  box-shadow: 0 0 3px #20232A, 0 0 4px black inset;\r\n\tborder-radius: 9px;\r\n\tborder: 2px solid #20232A;\r\n`\r\n\r\nconst CardLevel = styled.h3 `\r\n  // move level to upper-right of title space\r\n  position: absolute;\r\n  // force text to have it's own dynamic area\r\n  padding: 2.5%;\r\n  padding-bottom: 1.5%;\r\n\r\n  // will change with other styling changes often\r\n  left: 100%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  // centers level to middle of line; px scales equally porportional to level font size\r\n  min-width: 16.5px;\r\n  min-height: 16.5px;\r\n  text-align: center;\r\n\r\n  font-size: 0.82rem;\r\n\r\n  // general styling\r\n  background-color: #20232A;\r\n  box-shadow: 0 0 3px #20232A, 0 0 4px black inset;\r\n\tborder-radius: 10px;\r\n\tborder: 2px solid #20232A;\r\n`\r\n\r\n// inherit styles from item level; only thing that changes is position\r\nconst CardEnhancement = styled(CardLevel) `\r\n  left: 0;\r\n  top: 50%;\r\n`\r\n\r\nconst CardKeen = styled(CardLevel) `\r\n  padding: 2% 4.5%;\r\n  padding-bottom: 0;\r\n\r\n  left: 0;\r\n  top: 100%;\r\n  transform: translate(-31%, -35%);\r\n  \r\n\tborder-radius: 9px;\r\n\r\n  font-size: 0.66rem;\r\n`\r\n\r\nconst CardOnHit = styled(CardKeen) `\r\n  left: 100%;\r\n  min-width: 20px;\r\n  transform: translate(-75%, -35%);\r\n`\r\n\r\nconst CardInfo = styled.div `\r\n\tmargin: 2.5%;\r\n  padding: 5%;\r\n\r\n  // hack to make info-box not exceed parent dimensions; 'box-sizing: border-box' doesn't work; may mess with card info styling if there's a lot of content to display\r\n  height: 65%;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  // general styling\r\n  background-color: #20232A;\r\n  box-shadow: 0 0 3px #20232A, 0 0 10px black inset;\r\n\tborder-radius: 10px;\r\n\tborder: 2px solid #20232A;\r\n`\r\n\r\nconst items = [\r\n  // weapons\r\n  {\r\n    name: \"Justice\",\r\n    base: 'Light Hammer',\r\n    level: 20,\r\n    enhancement: '+4',\r\n    keen: true,\r\n    onHit: {\r\n      effect: 'Daze',\r\n      chance: '50%',\r\n      dc: 20,\r\n      duration: 2\r\n    },\r\n    damage: {\r\n      physical: '2d8',\r\n      positive: '1d8'\r\n    }\r\n  },\r\n  {\r\n    name: \"Voidmind Blade\",\r\n    level: 35,\r\n    base: 'Shortsword',\r\n    enhancement: '+7',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Crafted Enchanted Two-bladed Sword\",\r\n    level: 25,\r\n    base: 'Two-Bladed Sword',\r\n    enhancement: '+5',\r\n    keen: true,\r\n    onHit: ''\r\n  },\r\n  {\r\n    name: \"Crafted Silvery Scimitar\",\r\n    level: 20,\r\n    base: 'Scimitar',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Frozen Cleaver\",\r\n    level: 20,\r\n    base: 'Scimitar',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Halfling's Gift\",\r\n    level: 5,\r\n    base: 'Shortbow'\r\n  },\r\n  {\r\n    name: \"Feon's Staff of the Forest\",\r\n    level: 16,\r\n    base: 'Quarterstaff'\r\n  },\r\n  {\r\n    name: \"Staff of the Crashing Surf\",\r\n    level: 25,\r\n    base: 'Quarterstaff',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Githyanki Double Silver Sword\",\r\n    level: 40,\r\n    base: 'Two-Bladed Sword',\r\n    enhancement: '+7',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Mighty Talon\",\r\n    level: 40,\r\n    base: 'Greatsword',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Githyanki Silver Sword\",\r\n    level: 40,\r\n    base: 'Greatsword',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"House Dourden's Will\",\r\n    level: 13,\r\n    base: 'Greatsword',\r\n    keen: true\r\n  },\r\n  {\r\n    name: \"Alzaara Guardian Greatsword\",\r\n    level: 25,\r\n    base: 'Greatsword',\r\n    keen: true\r\n  }\r\n]\r\n\r\n// logic for conditionally displaying render elements; code ran directly after declaring array because we only need to set these conditional values at application compile-time\r\nitems.map(card => {\r\n  if (card.hasOwnProperty(\"enhancement\")) {\r\n    Object.defineProperty(card, \"enhancement\", {value: <CardEnhancement>{card.enhancement}</CardEnhancement>})\r\n  }\r\n\r\n  if (card.hasOwnProperty(\"keen\") && card.keen === true) {\r\n    Object.defineProperty(card, \"keen\", {value: <CardKeen>Keen</CardKeen>})\r\n  }\r\n\r\n  if (card.hasOwnProperty(\"onHit\")) {\r\n    Object.defineProperty(card, \"onHit\", {value: <CardOnHit>OnHit</CardOnHit>})\r\n  }\r\n\r\n  return card;\r\n})","/*\n  Theme:\n    Bluish: #20232A\n    Dark Bluish: #0D1117\n\t\tDark Gray: #181A1B\n\t\tNear Black: #0D0D0D\n*/\n\n// dependencies\nimport { useState } from 'react';\nimport styled from 'styled-components';\n\n// components\nimport Search from './components/Search';\nimport Items from './components/Cards';\n\nexport default function App() {\n  const [query, setQuery] = useState({ text: '' });\n  // const [savedCards, setSavedCards] = useState([]);\n\n  const onQueryChange = event => {\n    setQuery({ ...query, [event.target.name]: event.target.value });\n  }\n\n  return (\n    <TopDiv id=\"app\">\n      <Search query={query} onQueryChange={onQueryChange} />\n      <Items query={query} />\n    </TopDiv> \n  )\n}\n\nconst TopDiv = styled.div `\n  display: flex;\n  flex-direction: column;\n`","// dependencies\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\n// components\nimport App from './App';\n\n// attach app to dom\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}